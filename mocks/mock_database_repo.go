// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "booking/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockDatabaseRepo is a mock of DatabaseRepo interface
type MockDatabaseRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseRepoMockRecorder
}

// MockDatabaseRepoMockRecorder is the mock recorder for MockDatabaseRepo
type MockDatabaseRepoMockRecorder struct {
	mock *MockDatabaseRepo
}

// NewMockDatabaseRepo creates a new mock instance
func NewMockDatabaseRepo(ctrl *gomock.Controller) *MockDatabaseRepo {
	mock := &MockDatabaseRepo{ctrl: ctrl}
	mock.recorder = &MockDatabaseRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabaseRepo) EXPECT() *MockDatabaseRepoMockRecorder {
	return m.recorder
}

// AllUsers mocks base method
func (m *MockDatabaseRepo) AllUsers() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllUsers")
	ret0, _ := ret[0].(bool)
	return ret0
}

// AllUsers indicates an expected call of AllUsers
func (mr *MockDatabaseRepoMockRecorder) AllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllUsers", reflect.TypeOf((*MockDatabaseRepo)(nil).AllUsers))
}

// InsertReservation mocks base method
func (m *MockDatabaseRepo) InsertReservation(res models.Reservation) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertReservation", res)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertReservation indicates an expected call of InsertReservation
func (mr *MockDatabaseRepoMockRecorder) InsertReservation(res interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertReservation", reflect.TypeOf((*MockDatabaseRepo)(nil).InsertReservation), res)
}

// InsertRoomRestriction mocks base method
func (m *MockDatabaseRepo) InsertRoomRestriction(r models.RoomRestriction) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRoomRestriction", r)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertRoomRestriction indicates an expected call of InsertRoomRestriction
func (mr *MockDatabaseRepoMockRecorder) InsertRoomRestriction(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRoomRestriction", reflect.TypeOf((*MockDatabaseRepo)(nil).InsertRoomRestriction), r)
}

// SearchAvailabilityByDatesByRoomID mocks base method
func (m *MockDatabaseRepo) SearchAvailabilityByDatesByRoomID(roomID int, start, end time.Time) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAvailabilityByDatesByRoomID", roomID, start, end)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAvailabilityByDatesByRoomID indicates an expected call of SearchAvailabilityByDatesByRoomID
func (mr *MockDatabaseRepoMockRecorder) SearchAvailabilityByDatesByRoomID(roomID, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAvailabilityByDatesByRoomID", reflect.TypeOf((*MockDatabaseRepo)(nil).SearchAvailabilityByDatesByRoomID), roomID, start, end)
}

// SearchAvailabilityForAllRooms mocks base method
func (m *MockDatabaseRepo) SearchAvailabilityForAllRooms(start, end time.Time) ([]models.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAvailabilityForAllRooms", start, end)
	ret0, _ := ret[0].([]models.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAvailabilityForAllRooms indicates an expected call of SearchAvailabilityForAllRooms
func (mr *MockDatabaseRepoMockRecorder) SearchAvailabilityForAllRooms(start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAvailabilityForAllRooms", reflect.TypeOf((*MockDatabaseRepo)(nil).SearchAvailabilityForAllRooms), start, end)
}

// GetRoomByID mocks base method
func (m *MockDatabaseRepo) GetRoomByID(id int) (models.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomByID", id)
	ret0, _ := ret[0].(models.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomByID indicates an expected call of GetRoomByID
func (mr *MockDatabaseRepoMockRecorder) GetRoomByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomByID", reflect.TypeOf((*MockDatabaseRepo)(nil).GetRoomByID), id)
}

// UpdateUser mocks base method
func (m *MockDatabaseRepo) UpdateUser(u models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", u)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *MockDatabaseRepoMockRecorder) UpdateUser(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockDatabaseRepo)(nil).UpdateUser), u)
}

// Authenticate mocks base method
func (m *MockDatabaseRepo) Authenticate(email, testPassword string) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", email, testPassword)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Authenticate indicates an expected call of Authenticate
func (mr *MockDatabaseRepoMockRecorder) Authenticate(email, testPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockDatabaseRepo)(nil).Authenticate), email, testPassword)
}
